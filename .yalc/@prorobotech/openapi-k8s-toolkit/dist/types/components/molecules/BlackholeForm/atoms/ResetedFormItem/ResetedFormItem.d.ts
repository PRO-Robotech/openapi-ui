/// <reference types="react" />
export declare const ResetedFormItem: import("styled-components").IStyledComponent<"web", {
    prefixCls?: string | undefined;
    noStyle?: boolean | undefined;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    rootClassName?: string | undefined;
    children?: import("react").ReactNode | ((form: import("antd").FormInstance<unknown>) => import("react").ReactNode);
    id?: string | undefined;
    hasFeedback?: boolean | {
        icons: import("antd/es/form/FormItem").FeedbackIcons;
    } | undefined;
    validateStatus?: "" | "error" | "success" | "warning" | "validating" | undefined;
    required?: boolean | undefined;
    hidden?: boolean | undefined;
    initialValue?: any;
    messageVariables?: Record<string, string> | undefined;
    tooltip?: import("antd/es/form/FormItemLabel").LabelTooltipType;
    fieldKey?: import("react").Key | import("react").Key[] | undefined;
    layout?: import("antd/es/form/Form").FormItemLayout | undefined;
    label?: import("react").ReactNode;
    htmlFor?: string | undefined;
    vertical?: boolean | undefined;
    colon?: boolean | undefined;
    labelAlign?: import("antd/es/form/interface").FormLabelAlign | undefined;
    labelCol?: import("antd").ColProps | undefined;
    wrapperCol?: import("antd").ColProps | undefined;
    extra?: import("react").ReactNode;
    status?: "" | "error" | "success" | "warning" | "validating" | undefined;
    help?: import("react").ReactNode;
    fieldId?: string | undefined;
    onReset?: (() => void) | undefined;
    name?: unknown;
    normalize?: ((value: any, prevValue: any, allValues: import("rc-field-form/lib/interface").Store) => any) | undefined;
    rules?: import("antd").FormRule[] | undefined;
    trigger?: string | undefined;
    dependencies?: any[] | undefined;
    getValueFromEvent?: ((...args: import("rc-field-form/lib/interface").EventArgs) => any) | undefined;
    shouldUpdate?: import("rc-field-form/lib/Field").ShouldUpdate<unknown> | undefined;
    validateTrigger?: string | false | string[] | undefined;
    validateDebounce?: number | undefined;
    validateFirst?: boolean | "parallel" | undefined;
    valuePropName?: string | undefined;
    getValueProps?: ((value: any) => Record<string, unknown>) | undefined;
    onMetaChange?: ((meta: import("rc-field-form/lib/Field").MetaEvent) => void) | undefined;
    preserve?: boolean | undefined;
    isListField?: boolean | undefined;
    isList?: boolean | undefined;
}>;
