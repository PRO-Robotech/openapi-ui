import React, { FC } from 'react'
import { useNavigate } from 'react-router-dom'
import { theme as antdtheme, Flex, Typography } from 'antd'
import { EarthIcon, getUppercase, hslFromString, Spacer } from '@prorobotech/openapi-k8s-toolkit'
import { useSelector } from 'react-redux'
import { RootState } from 'store/store'
import { TEventsV1Event } from '../../types'
import { eventText, timeAgo, getResourceLink, getNamespaceLink, formatEventSummary } from './utils'
import { Styled } from './styled'

type TEventRowProps = {
  e: TEventsV1Event
  baseprefix?: string
  cluster: string
  getPlural?: (kind: string, apiVersion?: string) => string | undefined
}

export const EventRow: FC<TEventRowProps> = ({ e, baseprefix, cluster, getPlural }) => {
  const { token } = antdtheme.useToken()
  const navigate = useNavigate()
  const theme = useSelector((state: RootState) => state.openapiTheme.theme)

  const abbr = e.regarding?.kind ? getUppercase(e.regarding.kind) : undefined
  const bgColor = e.regarding?.kind && abbr ? hslFromString(e.regarding?.kind, theme) : 'initial'
  const bgColorNamespace = hslFromString('Namespace', theme)

  const regardingKind: string | undefined = e.regarding?.kind
  const regardingApiVersion: string = e.regarding?.apiVersion || 'v1'
  const pluralName: string | undefined =
    regardingKind && regardingApiVersion ? getPlural?.(regardingKind, regardingApiVersion) : undefined
  const resourceLink: string | undefined = getResourceLink({
    baseprefix,
    cluster,
    namespace: e.regarding?.namespace,
    apiGroupVersion: regardingApiVersion,
    pluralName,
    name: e.regarding?.name,
  })
  const namespaceLink: string | undefined = getNamespaceLink({
    baseprefix,
    cluster,
    apiGroupVersion: 'v1',
    pluralName: 'namespaces',
    namespace: e.regarding?.namespace,
  })

  return (
    <Styled.Card
      $bigBorder={e.type === 'Warning'}
      $mainColor={e.type === 'Warning' ? token.colorWarningActive : token.colorText}
    >
      <Flex justify="space-between" align="center">
        <Flex align="center" gap={16}>
          <Flex align="center" gap={8}>
            <Styled.Abbr $bgColor={bgColor}>{abbr}</Styled.Abbr>
            {resourceLink ? (
              <Typography.Link
                onClick={e => {
                  e.preventDefault()
                  navigate(resourceLink)
                }}
              >
                {e.regarding?.name}
              </Typography.Link>
            ) : (
              <Typography.Text>{e.regarding?.name}</Typography.Text>
            )}
          </Flex>
          {e.regarding?.namespace && (
            <Flex align="center" gap={8}>
              <Styled.Abbr $bgColor={bgColorNamespace}>NS</Styled.Abbr>
              {namespaceLink ? (
                <Typography.Link
                  onClick={e => {
                    e.preventDefault()
                    navigate(namespaceLink)
                  }}
                >
                  {e.regarding?.namespace}
                </Typography.Link>
              ) : (
                <Typography.Text>{e.regarding?.namespace}</Typography.Text>
              )}
            </Flex>
          )}
        </Flex>
        {e.metadata?.creationTimestamp && (
          <Flex gap={4} align="center">
            <div>
              <EarthIcon />
            </div>
            <Styled.TimeStamp>{timeAgo(e.metadata?.creationTimestamp)}</Styled.TimeStamp>
          </Flex>
        )}
      </Flex>
      <Spacer $space={16} $samespace />
      <Flex justify="space-between">
        <Flex gap={8} align="center" wrap>
          <div>
            {e.deprecatedSource?.component && (
              <Flex gap={8} align="center" wrap>
                <Flex gap={6} align="center" wrap>
                  <Typography.Text type="secondary">Generated by</Typography.Text>
                  <Styled.Title>{e.deprecatedSource?.component}</Styled.Title>
                </Flex>
                <div>
                  <Typography.Text type="secondary">â€¢</Typography.Text>
                </div>
              </Flex>
            )}
          </div>
          <Styled.Title>{e.reason || e.action || 'Event'}</Styled.Title>
        </Flex>
        <Styled.TimesInPeriod>
          <Typography.Text type="secondary">{formatEventSummary(e)}</Typography.Text>
        </Styled.TimesInPeriod>
      </Flex>
      <Spacer $space={16} $samespace />
      {eventText(e) && <div>{eventText(e)}</div>}
    </Styled.Card>
  )
}
